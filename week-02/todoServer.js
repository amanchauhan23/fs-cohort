/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */

const express = require("express");
const app = express();
const bodyParser = require("body-parser");
const crypto = require("crypto");
const fs = require("fs");

const PORT = 3000;

app.use(bodyParser.json());

app.get("/todos", (req, res) => {
  fs.readFile("./todoServer.json", "utf-8", (err, data) => {
    if (err) return res.status(500).send("cant fetch data");
    data = JSON.parse(data);
    res.json(data);
  });
});

app.get("/todos/:id", (req, res) => {
  fs.readFile("./todoServer.json", "utf-8", (err, data) => {
    if (err) return res.status(500).send("cant access file");
    let todos = JSON.parse(data);
    let todo = todos.find((todo) => todo.id === req.params.id);
    if (!todo) return res.status(404).send("Not found");
    else res.json(todo);
  });
});

app.post("/todos", (req, res) => {
  fs.readFile("./todoServer.json", "utf-8", (err, data) => {
    if (err) return res.status(500).send("cant write data");
    let todos = JSON.parse(data);
    let randID = crypto.randomUUID();
    todos.push({
      id: randID,
      title: req.body.title,
      complete: req.body.complete,
      description: req.body.description,
    });
    fs.writeFile("./todoServer.json", JSON.stringify(todos), (err) => {
      if (err) return res.status(500).send("cant write data");
      res.status(201).json({ id: randID });
    });
  });
});

app.put("/todos/:id", (req, res) => {
  let id = req.params.id;
  fs.readFile("./todoServer.json", "utf-8", (err, data) => {
    if (err) return res.status(500).send("cant access file");
    let todos = JSON.parse(data);
    let index = todos.findIndex((todo) => todo.id === id);
    if (index === -1) return res.status(404).send("Not found");
    todos[index] = {
      id: id,
      title: req.body.title,
      complete: req.body.complete,
      description: req.body.description,
    };
    fs.writeFile("./todoServer.json", JSON.stringify(todos), (err) => {
      if (err) return res.status(404).send();
      res.status(200).json(todos);
    });
  });
});

app.delete("/todos/:id", (req, res) => {
  let id = req.params.id;
  fs.readFile("./todoServer.json", "utf-8", (err, data) => {
    if (err) return res.status(500).send("cant access file");
    let todos = JSON.parse(data);
    let index = todos.findIndex((todo) => todo.id === id);
    if (index === -1) return res.status(404).send("Not found");
    todos.splice(index, 1);
    fs.writeFile("./todoServer.json", JSON.stringify(todos), (err) => {
      if (err) throw err;
      res.status(200).json(todos);
    });
  });
});

app.use((req, res) => {
  res.status(404).send("unknown path");
});

app.listen(PORT, () => {
  console.log(`Listening on port: ${PORT}`);
});

module.exports = app;
